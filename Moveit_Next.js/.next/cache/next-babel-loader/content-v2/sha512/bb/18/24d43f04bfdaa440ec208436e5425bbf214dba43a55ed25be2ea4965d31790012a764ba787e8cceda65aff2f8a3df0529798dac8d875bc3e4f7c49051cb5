{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\nlw4\\\\moveit-2\\\\moveit-next\\\\src\\\\components\\\\countdown.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n/*useEffect => uma funcionalidade do react hook ou efeito que dispara efeitos colaterais => quando algo mudar ou algo alcontecer quero executar uma função, quero disparar algum efeito colateral. */\n\nimport styles from '../styles/Components/Countdown.module.css';\nexport function Countdown() {\n  _s();\n\n  const {\n    0: time,\n    1: seTime\n  } = useState(25 * 60);\n  const {\n    0: active,\n    1: setActive\n  } = useState(false);\n  /*somnte estará ativo ao clicar no botão*/\n\n  /*Estado que vai armazena se o Countdown está ativo ou não*/\n\n  /*inicializador do tempo do Countdown*/\n\n  const minutes = Math.floor(time / 60);\n  /*retorna valor baixo*/\n\n  const seconds = time % 60;\n  const [minuteLeft, minuteRight] = String(minutes).padStart(2, '0').split('');\n  const [secondLeft, secondRight] = String(seconds).padStart(2, '0').split('');\n\n  function startcountdown() {\n    /*Funcionalidade que reduz segundos e minutos*/\n    setActive(true);\n  }\n\n  useEffect(() => {\n    console.log(active);\n  }, [active]);\n  /*chamando a funcionalidade useEffect   2 parametros =>  1 como?{}, 2 quando? [],\r\n  [active] array de dependências*/\n\n  /*Split=> divide*/\n\n  return (\n    /*#__PURE__*/\n\n    /*seTime => função que vai alterar o valor*/\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.countdownContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: minuteLeft\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: minuteRight\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \":\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: secondLeft\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: secondRight\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: styles.countdownButton,\n        onClick: startcountdown,\n        children: \"Iniciar um Ciclo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  );\n}\n\n_s(Countdown, \"SpAH6CPvmvEsefF3GJ3iq3SIPp4=\");\n\n_c = Countdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countdown\");","map":{"version":3,"sources":["C:/nlw4/moveit-2/moveit-next/src/components/countdown.tsx"],"names":["useState","useEffect","styles","Countdown","time","seTime","active","setActive","minutes","Math","floor","seconds","minuteLeft","minuteRight","String","padStart","split","secondLeft","secondRight","startcountdown","console","log","countdownContainer","countdownButton"],"mappings":";;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAA6C;;AAC7C,OAAOC,MAAP,MAAmB,2CAAnB;AAEA,OAAO,SAASC,SAAT,GAAqB;AAAA;;AAC1B,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAiBL,QAAQ,CAAC,KAAK,EAAN,CAA/B;AACA,QAAM;AAAA,OAACM,MAAD;AAAA,OAASC;AAAT,MAAqBP,QAAQ,CAAC,KAAD,CAAnC;AAA+C;;AAE/C;;AAEC;;AACA,QAAMQ,OAAO,GAAIC,IAAI,CAACC,KAAL,CAAWN,IAAI,GAAE,EAAjB,CAAjB;AAAwC;;AACxC,QAAMO,OAAO,GAAGP,IAAI,GAAG,EAAvB;AAEA,QAAM,CAACQ,UAAD,EAAaC,WAAb,IAA4BC,MAAM,CAACN,OAAD,CAAN,CAAgBO,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,EAAiCC,KAAjC,CAAuC,EAAvC,CAAlC;AACA,QAAM,CAACC,UAAD,EAAaC,WAAb,IAA4BJ,MAAM,CAACH,OAAD,CAAN,CAAgBI,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,EAAiCC,KAAjC,CAAuC,EAAvC,CAAlC;;AAIA,WAASG,cAAT,GAA0B;AAAE;AAC3BZ,IAAAA,SAAS,CAAC,IAAD,CAAT;AAEA;;AAEDN,EAAAA,SAAS,CAAC,MAAM;AACfmB,IAAAA,OAAO,CAACC,GAAR,CAAYf,MAAZ;AACA,GAFQ,EAEP,CAACA,MAAD,CAFO,CAAT;AAEe;AAClB;;AAIG;;AACD;AAAA;;AAAW;AACP;AAAA,8BACE;AAAK,QAAA,SAAS,EAAEJ,MAAM,CAACoB,kBAAvB;AAAA,gCACA;AAAA,kCACA;AAAA,sBAAOV;AAAP;AAAA;AAAA;AAAA;AAAA,kBADA,eAEA;AAAA,sBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,kBAFA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALA,eAMA;AAAA,kCACA;AAAA,sBAAOI;AAAP;AAAA;AAAA;AAAA;AAAA,kBADA,eAEA;AAAA,sBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,kBAFA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAYE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAEhB,MAAM,CAACqB,eAAxC;AACD,QAAA,OAAO,EAAEJ,cADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAyBC;;GArDahB,S;;KAAAA,S","sourcesContent":["import { useState, useEffect } from 'react'; /*useEffect => uma funcionalidade do react hook ou efeito que dispara efeitos colaterais => quando algo mudar ou algo alcontecer quero executar uma função, quero disparar algum efeito colateral. */ \r\nimport styles from '../styles/Components/Countdown.module.css';\r\n\r\nexport function Countdown() {\r\n  const [time, seTime] = useState(25 * 60);\r\n  const [active, setActive] =useState(false);    /*somnte estará ativo ao clicar no botão*/\r\n   \r\n  /*Estado que vai armazena se o Countdown está ativo ou não*/\r\n\r\n   /*inicializador do tempo do Countdown*/\r\n   const minutes =  Math.floor(time /60);  /*retorna valor baixo*/\r\n   const seconds = time % 60;\r\n   \r\n   const [minuteLeft, minuteRight] = String(minutes).padStart(2, '0').split('');\r\n   const [secondLeft, secondRight] = String(seconds).padStart(2, '0').split('');\r\n\r\n\r\n\r\n   function startcountdown() { /*Funcionalidade que reduz segundos e minutos*/\r\n    setActive(true);\r\n\r\n   }\r\n\r\n   useEffect(() => {\r\n    console.log(active);\r\n   },[active])    /*chamando a funcionalidade useEffect   2 parametros =>  1 como?{}, 2 quando? [],\r\n    [active] array de dependências*/\r\n\r\n\r\n\r\n   /*Split=> divide*/\r\n  return (   /*seTime => função que vai alterar o valor*/\r\n      <div>\r\n        <div className={styles.countdownContainer}>\r\n        <div>\r\n        <span>{minuteLeft}</span>\r\n        <span>{minuteRight}</span>\r\n        </div>\r\n        <span>:</span>\r\n        <div>\r\n        <span>{secondLeft}</span>\r\n        <span>{secondRight}</span>\r\n        </div>\r\n        </div> \r\n        <button type=\"button\" className={styles.countdownButton}\r\n       onClick={startcountdown}\r\n       >\r\n        Iniciar um Ciclo    \r\n        </button> \r\n        </div>\r\n        \r\n      \r\n       \r\n       \r\n      \r\n    );\r\n  }"]},"metadata":{},"sourceType":"module"}