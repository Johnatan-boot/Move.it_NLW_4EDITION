{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\nlw4designfinal\\\\moveit-2\\\\moveit-next\\\\src\\\\contexts\\\\countdownContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { ChallengesContext } from './ChallengesContext';\nexport const CountdownContext = /*#__PURE__*/createContext({});\nlet countdownTimeout;\nexport function CountdownProvider({\n  children\n}) {\n  _s();\n\n  const {\n    startNewChallenge\n  } = useContext(ChallengesContext);\n  /*const [time, setTime] = useState(25 * 60);*/\n\n  const {\n    0: time,\n    1: setTime\n  } = useState(0.1 * 60);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    0: hasFinished,\n    1: setHasFinished\n  } = useState(false);\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n  /*function resetCountdown() {\r\n    clearTimeout(countdownTimeout);\r\n    setIsActive(false);\r\n    setHasFinished(false);\r\n    setTime(25 * 60); \r\n    \r\n  }*/\n\n\n  function resetCountdown() {\n    /*Funcionalidade que para o Countdown*/\n    clearTimeout(countdownTimeout);\n    /*Cancelando a Execução do Timeout*/\n\n    setIsActive(false);\n    /*Apartir deste momento reseta o countdown ou zera*/\n\n    setTime(0.1 * 60);\n  }\n\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time === 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes,\n      seconds,\n      hasFinished,\n      isActive,\n      startCountdown,\n      resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CountdownProvider, \"cVu0hsDf1rnm10+qbfS96WIdEJo=\");\n\n_c = CountdownProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountdownProvider\");","map":{"version":3,"sources":["C:/nlw4designfinal/moveit-2/moveit-next/src/contexts/countdownContext.tsx"],"names":["createContext","useContext","useEffect","useState","ChallengesContext","CountdownContext","countdownTimeout","CountdownProvider","children","startNewChallenge","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","startCountdown","resetCountdown","clearTimeout","setTimeout"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,SAA/C,EAA0DC,QAA1D,QAA0E,OAA1E;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAeA,OAAO,MAAMC,gBAAgB,gBAAGL,aAAa,CAAC,EAAD,CAAtC;AAEP,IAAIM,gBAAJ;AAEA,OAAO,SAASC,iBAAT,CAA2B;AAAEC,EAAAA;AAAF,CAA3B,EAAiE;AAAA;;AACtE,QAAM;AAAEC,IAAAA;AAAF,MAAwBR,UAAU,CAACG,iBAAD,CAAxC;AAEA;;AACA,QAAM;AAAA,OAACM,IAAD;AAAA,OAAOC;AAAP,MAAkBR,QAAQ,CAAC,MAAM,EAAP,CAAhC;AACA,QAAM;AAAA,OAACS,QAAD;AAAA,OAAWC;AAAX,MAA0BV,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACW,WAAD;AAAA,OAAcC;AAAd,MAAgCZ,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAMa,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB;AACA,QAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;;AAEA,WAASU,cAAT,GAA0B;AACxBP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASQ,cAAT,GAA0B;AAAG;AAC3BC,IAAAA,YAAY,CAAChB,gBAAD,CAAZ;AAAgC;;AAChCO,IAAAA,WAAW,CAAC,KAAD,CAAX;AAAwB;;AAC1BF,IAAAA,OAAO,CAAC,MAAM,EAAP,CAAP;AAGC;;AAEDT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACxBJ,MAAAA,gBAAgB,GAAGiB,UAAU,CAAC,MAAM;AAClCZ,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD,OAF4B,EAE1B,IAF0B,CAA7B;AAGD,KAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,KAAK,CAAzB,EAA4B;AACjCK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,MAAAA,iBAAiB;AAClB;AACF,GAVQ,EAUN,CAACG,QAAD,EAAWF,IAAX,CAVM,CAAT;AAYA,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAChCM,MAAAA,OADgC;AAEhCG,MAAAA,OAFgC;AAGhCL,MAAAA,WAHgC;AAIhCF,MAAAA,QAJgC;AAKhCQ,MAAAA,cALgC;AAMhCC,MAAAA;AANgC,KAAlC;AAAA,cAQGb;AARH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GAtDeD,iB;;KAAAA,iB","sourcesContent":["import { createContext, ReactNode, useContext, useEffect, useState } from \"react\";\r\nimport { ChallengesContext } from './ChallengesContext';\r\n\r\ninterface CountdownContextData {\r\n  minutes: number;\r\n  seconds: number;\r\n  hasFinished: boolean;\r\n  isActive: boolean;\r\n  startCountdown: () => void;\r\n  resetCountdown: () => void;\r\n}\r\n\r\ninterface CountdownProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const CountdownContext = createContext({} as CountdownContextData);\r\n\r\nlet countdownTimeout: NodeJS.Timeout;\r\n\r\nexport function CountdownProvider({ children }: CountdownProviderProps) {\r\n  const { startNewChallenge } = useContext(ChallengesContext);\r\n\r\n  /*const [time, setTime] = useState(25 * 60);*/\r\n  const [time, setTime] = useState(0.1 * 60); \r\n  const [isActive, setIsActive] = useState(false);\r\n  const [hasFinished, setHasFinished] = useState(false); \r\n\r\n  const minutes = Math.floor(time / 60);\r\n  const seconds = time % 60;\r\n\r\n  function startCountdown() {\r\n    setIsActive(true);\r\n  }\r\n\r\n  /*function resetCountdown() {\r\n    clearTimeout(countdownTimeout);\r\n    setIsActive(false);\r\n    setHasFinished(false);\r\n    setTime(25 * 60); \r\n    \r\n  }*/\r\n  function resetCountdown() {  /*Funcionalidade que para o Countdown*/\r\n    clearTimeout(countdownTimeout); /*Cancelando a Execução do Timeout*/\r\n    setIsActive(false);     /*Apartir deste momento reseta o countdown ou zera*/\r\n  setTime(0.1 * 60);\r\n  \r\n  \r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isActive && time > 0) {\r\n      countdownTimeout = setTimeout(() => {\r\n        setTime(time - 1);\r\n      }, 1000)\r\n    } else if (isActive && time === 0) {\r\n      setHasFinished(true);\r\n      setIsActive(false);\r\n      startNewChallenge();\r\n    }\r\n  }, [isActive, time])\r\n  \r\n  return (\r\n    <CountdownContext.Provider value={{\r\n      minutes,\r\n      seconds,\r\n      hasFinished,\r\n      isActive,\r\n      startCountdown,\r\n      resetCountdown,\r\n    }}>\r\n      {children}\r\n    </CountdownContext.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}