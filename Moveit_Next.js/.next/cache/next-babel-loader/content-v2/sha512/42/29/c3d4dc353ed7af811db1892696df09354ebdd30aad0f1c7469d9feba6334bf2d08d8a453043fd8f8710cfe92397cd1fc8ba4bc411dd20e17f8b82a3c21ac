{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\nlw4\\\\moveit-2\\\\moveit-next\\\\src\\\\contexts\\\\ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport challenges from '../../challenges.json';\n/*Desafios armazenados no arquivo challenges.json*/\n\nexport const ChallengesContext = /*#__PURE__*/createContext({});\n/*meu Contexto segue no formato da interface*/\n\nexport function ChallengesProvider({\n  children\n}) {\n  _s();\n\n  /*children tipado agora é um react*/\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState(0);\n  /*Experiência do usuário comecará sempre em 0 reagindo com app.*/\n\n  const {\n    0: challengesCompleted,\n    1: setchallengesCompleted\n  } = useState(30);\n  /*Tanto de desafios que o usuário completou.*/\n\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  /*.*/\n\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n  /*4 fator ou quantidade de Experiência, posso aumentar ou Diminuir, baseado em mais facil ou mais Dificil*/\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n  /*Funcionalidade que ao zerar countdown=> te envia um novo desafio, ou passa para proximo desafio*/\n\n\n  function startNewChallenge() {\n    /*a func. starnewchalenge vai...*/\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      experienceToNextLevel,\n      challengesCompleted,\n      levelUp,\n      startNewChallenge,\n      activeChallenge,\n      resetChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChallengesProvider, \"HIbtR1pMEytMoM3NAvktiaHq4Vg=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["C:/nlw4/moveit-2/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setchallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","resetChallenge"],"mappings":";;;;;AACA,SAAQA,aAAR,EAAuBC,QAAvB,QAAiD,OAAjD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAAgD;;AAwBhD,OAAO,MAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAAsE;;AAE7E,OAAO,SAASI,kBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAAkE;AAAA;;AAAE;AACvE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBN,QAAQ,CAAC,CAAD,CAAlC;AACH,QAAM;AAAA,OAACO,iBAAD;AAAA,OAAoBC;AAApB,MAA4CR,QAAQ,CAAC,CAAD,CAA1D;AAA+D;;AAC/D,QAAM;AAAA,OAACS,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDV,QAAQ,CAAC,EAAD,CAA9D;AAAoE;;AACpE,QAAM;AAAA,OAACW,eAAD;AAAA,OAAkBC;AAAlB,MAAwCZ,QAAQ,CAAC,IAAD,CAAtD;AAA8D;;AAC9D,QAAMa,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAa,CAAtB,EAAyB,CAAzB,CAA9B;AAA0D;;AACzD,WAASW,OAAT,GAAmB;AACjBV,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;AAED;;;AACA,WAASY,iBAAT,GAA6B;AAAE;AAC7B,UAAMC,oBAAoB,GAAGJ,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACM,MAAL,KAAgBnB,UAAU,CAACoB,MAAtC,CAA7B;AACA,UAAMC,SAAS,GAAGrB,UAAU,CAACiB,oBAAD,CAA5B;AAEAN,IAAAA,kBAAkB,CAACU,SAAD,CAAlB;AAGH;;AACD,WAASC,cAAT,GAA0B;AAEtBX,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AACG,sBACI,QAAC,iBAAD,CAAmB,QAAnB;AACA,IAAA,KAAK,EAAE;AAACP,MAAAA,KAAD;AACPE,MAAAA,iBADO;AAEPM,MAAAA,qBAFO;AAGPJ,MAAAA,mBAHO;AAIPO,MAAAA,OAJO;AAKPC,MAAAA,iBALO;AAMPN,MAAAA,eANO;AAOPY,MAAAA;AAPO,KADP;AAAA,cAWGnB;AAXH;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH;;GAvCeD,kB;;KAAAA,kB","sourcesContent":["import { formatWithOptions } from \"util\";\r\nimport {createContext, useState, ReactNode} from 'react';\r\nimport challenges from '../../challenges.json'; /*Desafios armazenados no arquivo challenges.json*/\r\n\r\ninterface Challenge{\r\n type: 'body' | 'eye';\r\n description: string;\r\n amount: number\r\n}\r\n\r\ninterface ChallengesContextData { /*Criada uma funcional. em typescript, qque retorna dados do Contexto*/\r\n level:number;\r\n currentExperience:number;\r\n experienceToNextLevel:number;\r\n challengesCompleted:number;\r\n activeChallenge: Challenge; /*activeChallenge=> é um objeto/\r\n levelUp:() => void; /*Função que não têm retorno*/\r\n startNewChallenge:() => void; /*Função que não têm retorno*/\r\n resetChallenge:() => void;\r\n}\r\n\r\ninterface ChallengesProviderProps {\r\nchildren: ReactNode;/*ReactNode=> vai aceitar qualquer elemento Filho dentro do Children, pode\r\nser um componente um texto uma tag html, algo assim*/ /*Componente React, propriedade*/\r\n}\r\n\r\nexport const ChallengesContext = createContext({} as ChallengesContextData); /*meu Contexto segue no formato da interface*/\r\n\r\nexport function ChallengesProvider({ children }:ChallengesProviderProps) { /*children tipado agora é um react*/\r\n    const [level, setLevel] = useState(1);\r\n const [currentExperience, setCurrentExperience] = useState(0); /*Experiência do usuário comecará sempre em 0 reagindo com app.*/\r\n const [challengesCompleted, setchallengesCompleted] = useState(30); /*Tanto de desafios que o usuário completou.*/\r\n const [activeChallenge, setActiveChallenge] = useState(null); /*.*/\r\n const experienceToNextLevel = Math.pow((level + 1) *4, 2) /*4 fator ou quantidade de Experiência, posso aumentar ou Diminuir, baseado em mais facil ou mais Dificil*/\r\n  function levelUp() {\r\n    setLevel(level + 1);\r\n  }\r\n\r\n  /*Funcionalidade que ao zerar countdown=> te envia um novo desafio, ou passa para proximo desafio*/\r\n  function startNewChallenge() { /*a func. starnewchalenge vai...*/\r\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\r\n    const challenge = challenges[randomChallengeIndex];\r\n    \r\n    setActiveChallenge(challenge)\r\n\r\n\r\n}\r\nfunction resetChallenge() {\r\n\r\n    setActiveChallenge(null);\r\n}\r\n    return(\r\n        <ChallengesContext.Provider \r\n        value={{level,\r\n        currentExperience,\r\n        experienceToNextLevel,\r\n        challengesCompleted, \r\n        levelUp,\r\n        startNewChallenge,\r\n        activeChallenge,\r\n        resetChallenge\r\n        }}\r\n        >\r\n          {children}\r\n        </ChallengesContext.Provider>\r\n\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}